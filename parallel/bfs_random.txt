#include "IRGenVisitor.h"
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/Verifier.h>
#include <chrono>

void IRGenVisitor::visitProgram(ProgramNodePtr prog)
{

    for (auto &node : prog->topLevel)
    {
        if (node->type == ASTNodeType::FunctionDecl)
        {
            auto *FD = static_cast<FunctionDeclNode *>(node.get());

            // Collect parameter types (all i32 for now)
            std::vector<llvm::Type *> paramTys;
            for (size_t i = 0; i < FD->parameters.size(); ++i)
            {
                paramTys.push_back(Builder.getInt32Ty());
            }

            // Determine return type
            llvm::Type *retTy;
            if (FD->returnType == "void")
            {
                retTy = llvm::Type::getVoidTy(Context);
            }
            else
            {
                retTy = Builder.getInt32Ty();
            }

            // Create the function prototype and insert into the module
            llvm::FunctionType *funcType =
                llvm::FunctionType::get(retTy, paramTys, /*isVarArg=*/false);
            llvm::Function *fn =
                llvm::Function::Create(funcType,
                                       llvm::Function::ExternalLinkage,
                                       FD->name,
                                       &Module);

            // Remember it for later call-site lookups
            FunctionProtos[FD->name] = fn;
        }
    }

    // Create: int main()
    auto *intTy = Builder.getInt32Ty();
    auto *mainFT = llvm::FunctionType::get(intTy, /*isVarArg=*/false);
    auto *mainF = llvm::Function::Create(
        mainFT,
        llvm::Function::ExternalLinkage,
        "main",
        &Module);

    // Entry block
    auto *BB = llvm::BasicBlock::Create(Context, "entry", mainF);
    Builder.SetInsertPoint(BB);

    // Lower every top‑level AST node
    for (auto &node : prog->topLevel)
    {
        switch (node->type)
        {
        case ASTNodeType::VarDecl:
            visitVarDecl(static_cast<VarDeclNode *>(node.get()));
            break;
        case ASTNodeType::BinaryExpr:
        case ASTNodeType::AssignmentStmt:
            // you’ll need an AST node for assignment too; lower it here
            visitAssignment(static_cast<AssignmentStmtNode *>(node.get()));
            break;
        case ASTNodeType::Conditional:
            visitConditional(static_cast<ConditionalNode *>(node.get()));
            break;
        case ASTNodeType::PrintStmt:
            visitPrintStmt(static_cast<PrintStmtNode *>(node.get()));
            break;
        case ASTNodeType::WhileStmt:
            visitWhile(static_cast<WhileStmtNode *>(node.get()));
            break;
        case ASTNodeType::GraphDecl:
            // Lower graph h { … }
            visitGraphDecl(static_cast<GraphDeclNode *>(node.get()));
            break;
        case ASTNodeType::QueryNode:
            visitQuery(static_cast<QueryNode *>(node.get()));
            break;
        default:
            // ignore or handle other kinds
            break;
        }
    }

    // Return 0
    Builder.CreateRet(llvm::ConstantInt::get(intTy, 0));

    llvm::verifyFunction(*mainF, &llvm::errs());
    for (auto &node : prog->topLevel)
    {
        if (node->type == ASTNodeType::FunctionDecl)
        {
            visitFunctionDecl(static_cast<FunctionDeclNode *>(node.get()));
        }
    }
}

void IRGenVisitor::visitFunctionDecl(FunctionDeclNode *funcDecl)
{
    // 1) Grab the LLVM Function* from your prototype map
    llvm::Function *function = FunctionProtos[funcDecl->name];
    assert(function && "No prototype for function");

    // 2) Create entry block and set builder
    llvm::BasicBlock *BB = llvm::BasicBlock::Create(Context, "entry", function);
    Builder.SetInsertPoint(BB);

    // 3) New scope for locals/params
    NamedValues.clear();

    // 4) Allocate space for each parameter and store the incoming arg
    unsigned idx = 0;
    for (auto &arg : function->args())
    {
        // Name it
        arg.setName(funcDecl->parameters[idx]->paramName);

        // Create an alloca in entry
        llvm::AllocaInst *alloca =
            createEntryBlockAlloca(function, arg.getName().str());

        // Store the initial argument value into our alloca
        Builder.CreateStore(&arg, alloca);

        // Remember it for lookups in the body
        NamedValues[arg.getName().str()] = alloca;
        idx++;
    }

    // 5) Lower the function body statements
    auto *bodyBlock = static_cast<BlockStmtNode *>(funcDecl->body.get());
    for (auto &stmt : bodyBlock->statements)
    {
        visitStatement(stmt.get());
    }

    // 6) If no explicit return (and non-void), insert a default
    if (!Builder.GetInsertBlock()->getTerminator())
    {
        if (funcDecl->returnType == "void")
        {
            Builder.CreateRetVoid();
        }
        else
        {
            Builder.CreateRet(
                llvm::ConstantInt::get(
                    Builder.getInt32Ty(), // <-- no Context here
                    0));
        }
    }

    // 7) Verify this function
    llvm::verifyFunction(*function, &llvm::errs());
}

void IRGenVisitor::visitConditional(ConditionalNode *ifs)
{
    llvm::Value *condVal = visitExpr(ifs->condition.get());
    llvm::Value *condBool = condVal;

    // gets the current function. LLVM needs to know which function the blocks are part of
    llvm::Function *parent = Builder.GetInsertBlock()->getParent();
    auto *thenBB = llvm::BasicBlock::Create(Context, "then", parent);
    auto *elseBB = ifs->elseBlock
                       ? llvm::BasicBlock::Create(Context, "else")
                       : nullptr;
    auto *mergeBB = llvm::BasicBlock::Create(Context, "ifcont");

    // CreateCondBr creates a conditional jump instruction
    if (elseBB)
    {
        Builder.CreateCondBr(condBool, thenBB, elseBB);
    }
    else
    {
        Builder.CreateCondBr(condBool, thenBB, mergeBB);
    }

    Builder.SetInsertPoint(thenBB);
    auto *thenBlockNode = static_cast<BlockStmtNode *>(ifs->thenBlock.get());

    for (auto &stmt : thenBlockNode->statements)
    {
        visitStatement(stmt.get());
    }
    // after then, always jump to merge
    if (!Builder.GetInsertBlock()->getTerminator())
        Builder.CreateBr(mergeBB);

    // Emit else block (if present)
    if (elseBB)
    {
        elseBB->insertInto(parent);
        Builder.SetInsertPoint(elseBB);
        auto *elseBlockNode = static_cast<BlockStmtNode *>(ifs->elseBlock.get());
        for (auto &stmt : elseBlockNode->statements)
        {
            visitStatement(stmt.get());
        }
        if (!Builder.GetInsertBlock()->getTerminator())
            Builder.CreateBr(mergeBB);
    }
    mergeBB->insertInto(parent);
    Builder.SetInsertPoint(mergeBB);
}

void IRGenVisitor::visitStatement(ASTNode *node)
{
    switch (node->type)
    {
    case ASTNodeType::VarDecl:
        visitVarDecl(dynamic_cast<VarDeclNode *>(node));
        break;
    case ASTNodeType::AssignmentStmt:
        visitAssignment(dynamic_cast<AssignmentStmtNode *>(node));
        break;
    case ASTNodeType::ReturnStmt:
        visitReturnStmt(dynamic_cast<ReturnStmtNode *>(node));
        break;
    case ASTNodeType::Conditional:
        visitConditional(dynamic_cast<ConditionalNode *>(node));
        break;
    case ASTNodeType::BlockStmt:
        visitBlock(dynamic_cast<BlockStmtNode *>(node));
        break;
    // case ASTNodeType::ReturnStmt:
    //     visitReturnStmt(static_cast<ReturnStmtNode*>(node));
    //     break;
    case ASTNodeType::WhileStmt:
        visitWhile(static_cast<WhileStmtNode *>(node));
        break;
    case ASTNodeType::PrintStmt:
        visitPrintStmt(static_cast<PrintStmtNode *>(node));
        break;

    case ASTNodeType::QueryNode:
        std::cerr << "Entered queryNODe\n";
        visitQuery(static_cast<QueryNode *>(node));
        break;

    default:
        std::cerr << "Unsupported statement type.\n";
        break;
    }
}

void IRGenVisitor::visitBlock(BlockStmtNode *block)
{
    for (auto &stmt : block->statements)
    {
        visitStatement(stmt.get());
    }
}

void IRGenVisitor::visitReturnStmt(ReturnStmtNode *ret)
{
    if (ret->returnValue)
    {
        llvm::Value *val = visitExpr(ret->returnValue.get());
        Builder.CreateRet(val);
    }
    else
    {
        Builder.CreateRetVoid();
    }
}

void IRGenVisitor::visitAssignment(AssignmentStmtNode *assign)
{
    std::cerr << "[IRGen] visitAssignment called for LHS type = " << static_cast<int>(assign->lhs->type) << "\n";

    // Evaluate RHS first
    llvm::Value *rhsVal = visitExpr(assign->rhs.get());

    // Case 1: LHS is a scalar variable
    if (assign->lhs->type == ASTNodeType::Variable)
    {
        auto *varNode = static_cast<VariableNode *>(assign->lhs.get());
        auto it = NamedValues.find(varNode->name);
        if (it == NamedValues.end())
            throw std::runtime_error("IRGenVisitor: undefined variable in assignment: " + varNode->name);

        llvm::AllocaInst *alloca = it->second;
        llvm::Type *allocTy = alloca->getAllocatedType();

        // Cast RHS if needed
        if (rhsVal->getType() != allocTy)
        {
            if (rhsVal->getType()->isIntegerTy() && allocTy->isIntegerTy())
                rhsVal = Builder.CreateIntCast(rhsVal, llvm::cast<llvm::IntegerType>(allocTy), true);
            else
                throw std::runtime_error("IRGenVisitor: type mismatch in scalar assignment");
        }

        Builder.CreateStore(rhsVal, alloca);
        return;
    }

    // Case 2: LHS is an array element access
    else if (assign->lhs->type == ASTNodeType::ArrayAccess)
    {
        auto *A = static_cast<ArrayAccessNode *>(assign->lhs.get());
        auto *baseVar = dynamic_cast<VariableNode *>(A->arrayExpr.get());
        if (!baseVar)
            throw std::runtime_error("IRGenVisitor: unsupported array base expression");

        auto it = NamedValues.find(baseVar->name);
        if (it == NamedValues.end())
            throw std::runtime_error("IRGenVisitor: undefined array in assignment: " + baseVar->name);

        llvm::AllocaInst *baseAlloca = it->second;

        // Evaluate the index
        llvm::Value *idxVal = visitExpr(A->indexExpr.get());
        if (idxVal->getType() != Builder.getInt32Ty())
            idxVal = Builder.CreateIntCast(idxVal, Builder.getInt32Ty(), true);

        // If it's a static array allocated on stack
        if (auto *arrTy = llvm::dyn_cast<llvm::ArrayType>(baseAlloca->getAllocatedType()))
        {
            llvm::Value *elemPtr = Builder.CreateGEP(
                arrTy,      // pointee type
                baseAlloca, // pointer
                {Builder.getInt32(0), idxVal},
                baseVar->name + "_elemptr");

            llvm::Type *elemTy = arrTy->getElementType();

            if (rhsVal->getType() != elemTy)
            {
                if (rhsVal->getType()->isIntegerTy() && elemTy->isIntegerTy())
                    rhsVal = Builder.CreateIntCast(rhsVal, llvm::cast<llvm::IntegerType>(elemTy), true);
                else
                    throw std::runtime_error("IRGenVisitor: type mismatch in array assignment");
            }

            Builder.CreateStore(rhsVal, elemPtr);
            return;
        }

        // If it's a pointer to dynamically allocated array
        else if (auto *ptrTy = llvm::dyn_cast<llvm::PointerType>(baseAlloca->getAllocatedType()))
        {
            llvm::Type *elemTy = ptrTy->getNonOpaquePointerElementType();

            llvm::Value *elemPtr = Builder.CreateGEP(
                elemTy,     // pointee type
                baseAlloca, // pointer
                {idxVal},   // index
                baseVar->name + "_elemptr");

            if (rhsVal->getType() != elemTy)
            {
                if (rhsVal->getType()->isIntegerTy() && elemTy->isIntegerTy())
                    rhsVal = Builder.CreateIntCast(rhsVal, llvm::cast<llvm::IntegerType>(elemTy), true);
                else
                    throw std::runtime_error("IRGenVisitor: type mismatch in pointer array assignment");
            }

            Builder.CreateStore(rhsVal, elemPtr);
            return;
        }

        else
        {
            throw std::runtime_error("IRGenVisitor: unsupported array storage type for " + baseVar->name);
        }
    }

    // Unsupported LHS
    else
    {
        throw std::runtime_error("IRGenVisitor: Unsupported LHS in assignment");
    }
}

llvm::AllocaInst *IRGenVisitor::visitVarDecl(VarDeclNode *decl)
{
    llvm::Function *currentFunction = Builder.GetInsertBlock()->getParent();

    // --- Array path (explicit array or array-initializer) ---
    if (decl->isArray)
    {
        size_t N = decl->arraySize;

        // If initializer present and is ArrayLiteral, we can verify/adjust
        if (decl->initializer && decl->initializer->type == ASTNodeType::ArrayLiteral)
        {
            auto *arrLit = static_cast<ArrayLiteralNode *>(decl->initializer.get());
            // If explicit size is 0 (shouldn't happen with our builder), infer from initializer
            if (N == 0)
                N = arrLit->elements.size();
            // If initializer is larger than declared size, you may want to error or truncate
        }

        if (N == 0)
        {
            throw std::runtime_error("IRGenVisitor::visitVarDecl: array size is zero for " + decl->name);
        }

        // Build the LLVM array type [N x i32]
        llvm::ArrayType *arrTy = llvm::ArrayType::get(Builder.getInt32Ty(), N);

        // Create alloca in the entry block manually with arrTy
        llvm::IRBuilder<> tmpB(&currentFunction->getEntryBlock(),
                               currentFunction->getEntryBlock().begin());
        llvm::AllocaInst *arrAlloca = tmpB.CreateAlloca(arrTy, nullptr, decl->name);

        // If initializer exists, store each initializer element and zero-fill remaining
        if (decl->initializer && decl->initializer->type == ASTNodeType::ArrayLiteral)
        {
            auto *arrLit = static_cast<ArrayLiteralNode *>(decl->initializer.get());
            size_t M = arrLit->elements.size();
            // store min(M, N) elements
            for (size_t i = 0; i < M && i < N; ++i)
            {
                llvm::Value *val = visitExpr(arrLit->elements[i].get());
                if (val->getType() != Builder.getInt32Ty() && val->getType()->isIntegerTy())
                {
                    val = Builder.CreateIntCast(val, Builder.getInt32Ty(), /*isSigned=*/true);
                }
                llvm::Value *gep = Builder.CreateGEP(
                    arrTy, arrAlloca,
                    {Builder.getInt32(0), Builder.getInt32(static_cast<int>(i))},
                    decl->name + "_elem");
                Builder.CreateStore(val, gep);
            }
            // zero-fill remaining elements
            for (size_t i = M; i < N; ++i)
            {
                llvm::Value *zero = llvm::ConstantInt::get(Builder.getInt32Ty(), 0);
                llvm::Value *gep = Builder.CreateGEP(
                    arrTy, arrAlloca,
                    {Builder.getInt32(0), Builder.getInt32(static_cast<int>(i))},
                    decl->name + "_elem");
                Builder.CreateStore(zero, gep);
            }
        }

        NamedValues[decl->name] = arrAlloca;
        return arrAlloca;
    }

    // --- Scalar path ---
    llvm::AllocaInst *scalarAlloca =
        createEntryBlockAlloca(currentFunction, decl->name);

    if (decl->initializer)
    {
        llvm::Value *initVal = visitExpr(decl->initializer.get());
        if (initVal->getType() != Builder.getInt32Ty() && initVal->getType()->isIntegerTy())
        {
            initVal = Builder.CreateIntCast(initVal, Builder.getInt32Ty(), true);
        }
        Builder.CreateStore(initVal, scalarAlloca);
    }
    else
    {
        Builder.CreateStore(llvm::ConstantInt::get(Builder.getInt32Ty(), 0), scalarAlloca);
    }

    NamedValues[decl->name] = scalarAlloca;
    return scalarAlloca;
}
void IRGenVisitor::visitWhile(WhileStmtNode *ws)
{
    llvm::BasicBlock *preheader = Builder.GetInsertBlock();
    llvm::Function *parent = preheader->getParent();

    auto *condBB = llvm::BasicBlock::Create(Context, "loopcond", parent);
    auto *bodyBB = llvm::BasicBlock::Create(Context, "loopbody", parent);
    auto *mergeBB = llvm::BasicBlock::Create(Context, "loopmerge", parent);

    Builder.SetInsertPoint(preheader);
    Builder.CreateBr(condBB);

    Builder.SetInsertPoint(condBB);
    llvm::Value *condV = visitExpr(ws->condition.get());
    Builder.CreateCondBr(condV, bodyBB, mergeBB);

    Builder.SetInsertPoint(bodyBB);
    visitBlock(static_cast<BlockStmtNode *>(ws->body.get()));
    // if the body didn’t already end in a terminator, loop back
    if (!Builder.GetInsertBlock()->getTerminator())
        Builder.CreateBr(condBB);

    Builder.SetInsertPoint(mergeBB);
}

llvm::Value *IRGenVisitor::visitExpr(ASTNode *expr)
{
    switch (expr->type)
    {
    case ASTNodeType::IntLiteral:
    {
        auto *intLit = static_cast<IntLiteralNode *>(expr);
        return llvm::ConstantInt::get(Builder.getInt32Ty(), intLit->value);
    }
    case ASTNodeType::Variable:
    {
        auto *varNode = static_cast<VariableNode *>(expr);
        auto it = NamedValues.find(varNode->name);
        if (it == NamedValues.end())
        {
            throw std::runtime_error("Undefined variable: " + varNode->name);
        }
        return Builder.CreateLoad(it->second->getAllocatedType(), it->second, varNode->name);
    }
    case ASTNodeType::BinaryExpr:
    {
        auto *bin = static_cast<BinaryExprNode *>(expr);
        llvm::Value *lhs = visitExpr(bin->lhs.get());
        llvm::Value *rhs = visitExpr(bin->rhs.get());
        if (bin->op == "+")
        {
            return Builder.CreateAdd(lhs, rhs, "addtmp");
        }
        else if (bin->op == "-")
        {
            return Builder.CreateSub(lhs, rhs, "subtmp");
        }
        else if (bin->op == "*")
        {
            return Builder.CreateMul(lhs, rhs, "multmp");
        }
        else if (bin->op == "/")
        {
            return Builder.CreateSDiv(lhs, rhs, "divtmp");
        }
        else if (bin->op == "%")
        {
            return Builder.CreateSRem(lhs, rhs, "modtmp");
        }
        else if (bin->op == "==")
        {
            return Builder.CreateICmpEQ(lhs, rhs, "eqtmp");
        }
        else if (bin->op == "!=")
        {
            return Builder.CreateICmpNE(lhs, rhs, "netmp");
        }
        else if (bin->op == "<")
        {
            return Builder.CreateICmpSLT(lhs, rhs, "lttmp");
        }
        else if (bin->op == "<=")
        {
            return Builder.CreateICmpSLE(lhs, rhs, "letmp");
        }
        else if (bin->op == ">")
        {
            return Builder.CreateICmpSGT(lhs, rhs, "gttmp");
        }
        else if (bin->op == ">=")
        {
            return Builder.CreateICmpSGE(lhs, rhs, "getmp");
        }
        else
        {
            throw std::runtime_error("Unsupported binary operator: " + bin->op);
        }
    }
    case ASTNodeType::FunctionCall:
    {
        auto *FC = static_cast<FunctionCallNode *>(expr);
        // Lookup the prototype
        llvm::Function *callee = FunctionProtos[FC->name];
        if (!callee)
            throw std::runtime_error("Unknown function: " + FC->name);

        // Evaluate arguments
        std::vector<llvm::Value *> args;
        for (auto &argNode : FC->arguments)
        {
            args.push_back(visitExpr(argNode.get()));
        }

        return Builder.CreateCall(callee, args, "calltmp");
    }

    case ASTNodeType::ArrayAccess:
    {
        auto *A = static_cast<ArrayAccessNode *>(expr);
        auto *baseVar = dynamic_cast<VariableNode *>(A->arrayExpr.get());
        if (!baseVar)
            throw std::runtime_error("Array base must be variable");

        auto it = NamedValues.find(baseVar->name);
        if (it == NamedValues.end())
            throw std::runtime_error("Undefined array in access: " + baseVar->name);
        llvm::AllocaInst *baseAlloca = it->second;

        llvm::Value *idxVal = visitExpr(A->indexExpr.get());
        if (idxVal->getType() != Builder.getInt32Ty())
            idxVal = Builder.CreateIntCast(idxVal, Builder.getInt32Ty(), true);

        auto *arrTy = llvm::dyn_cast<llvm::ArrayType>(baseAlloca->getAllocatedType());
        if (arrTy)
        {
            llvm::Value *elemPtr = Builder.CreateGEP(
                arrTy,
                baseAlloca,
                {Builder.getInt32(0), idxVal},
                baseVar->name + "_elemptr");
            llvm::Type *elemTy = arrTy->getElementType();
            return Builder.CreateLoad(elemTy, elemPtr, baseVar->name + "_loadelem");
        }
        else
        {
            // pointer case: baseAlloca holds a pointer to elements
            llvm::Type *baseTy = baseAlloca->getAllocatedType();
            if (auto *ptrTy = llvm::dyn_cast<llvm::PointerType>(baseTy))
            {
                llvm::Type *elemTy = ptrTy->getNonOpaquePointerElementType();

                // Compute element pointer with GEP
                llvm::Value *elemPtr = Builder.CreateGEP(
                    elemTy,
                    baseAlloca,
                    {idxVal},
                    baseVar->name + "_elemptr");

                // Load element and return
                return Builder.CreateLoad(elemTy, elemPtr, baseVar->name + "_loadelem");
            }

            throw std::runtime_error("IRGenVisitor: unsupported array storage type for load " + baseVar->name);
        }
    }

    default:
        throw std::runtime_error("Unsupported expression type in IRGenVisitor");
    }
}

llvm::Value *IRGenVisitor::visitGraphDecl(GraphDeclNode *G)
{
    auto *I64 = llvm::Type::getInt64Ty(Context);
    auto *I32 = llvm::Type::getInt32Ty(Context);
    auto *arrRP = llvm::ArrayType::get(I64, G->row_ptr.size());
    auto *arrCI = llvm::ArrayType::get(I32, G->col_idx.size());

    llvm::SmallVector<llvm::Constant *, 16> rpConsts;
    for (auto x : G->row_ptr)
    {
        rpConsts.push_back(llvm::ConstantInt::get(I64, x));
    }
    auto *RPArray = llvm::ConstantArray::get(arrRP, rpConsts);

    llvm::SmallVector<llvm::Constant *, 16> ciConsts;
    for (auto x : G->col_idx)
    {
        ciConsts.push_back(llvm::ConstantInt::get(I32, x));
    }
    auto *CIArray = llvm::ConstantArray::get(arrCI, ciConsts);

    auto *GV_RP = new llvm::GlobalVariable(
        Module, arrRP, true, llvm::GlobalValue::InternalLinkage,
        RPArray, G->name + "_csr_row");

    auto *GV_CI = new llvm::GlobalVariable(
        Module, arrCI, true, llvm::GlobalValue::InternalLinkage,
        CIArray, G->name + "_csr_col");

    auto *mallocTy = llvm::FunctionType::get(
        llvm::PointerType::getUnqual(llvm::Type::getInt8Ty(Context)),
        {llvm::Type::getInt64Ty(Context)},
        false);

    llvm::FunctionCallee mallocCalle = Module.getOrInsertFunction("malloc", mallocTy);
    llvm::Function *mallocFn = llvm::cast<llvm::Function>(mallocCalle.getCallee());

    uint64_t rowBytes = G->row_ptr.size() * sizeof(int64_t);
    uint64_t colBytes = G->col_idx.size() * sizeof(int32_t);

    llvm::Value *rpRaw = Builder.CreateCall(
        mallocFn, llvm::ConstantInt::get(I64, rowBytes), "rp_raw");
    llvm::Value *rowPtr = Builder.CreateBitCast(
        rpRaw, llvm::PointerType::getUnqual(I64), "row_ptr");

    llvm::Value *ciRaw = Builder.CreateCall(
        mallocFn, llvm::ConstantInt::get(I64, colBytes), "ci_raw");
    llvm::Value *colPtr = Builder.CreateBitCast(
        ciRaw, llvm::PointerType::getUnqual(I32), "col_ptr");

    llvm::Value *rp_i8 = Builder.CreateBitCast(rowPtr,
                                               llvm::PointerType::getUnqual(llvm::Type::getInt8Ty(Context)));
    llvm::Value *ci_i8 = Builder.CreateBitCast(colPtr,
                                               llvm::PointerType::getUnqual(llvm::Type::getInt8Ty(Context)));
    llvm::Value *src_rp = Builder.CreateBitCast(GV_RP,
                                                llvm::PointerType::getUnqual(llvm::Type::getInt8Ty(Context)));
    llvm::Value *src_ci = Builder.CreateBitCast(GV_CI,
                                                llvm::PointerType::getUnqual(llvm::Type::getInt8Ty(Context)));

    // Define the memcpy intrinsic type
    auto *i8PtrTy = llvm::PointerType::getUnqual(llvm::Type::getInt8Ty(Context));
    auto *i64Ty = llvm::Type::getInt64Ty(Context);
    auto *memcpyTy = llvm::Intrinsic::getDeclaration(
        &Module, llvm::Intrinsic::memcpy,
        {i8PtrTy, i8PtrTy, i64Ty});

    // Define the volatility flag as i1
    auto *volatileFlag = llvm::ConstantInt::get(llvm::Type::getInt1Ty(Context), 0);

    // Perform the memcpy calls with correct argument types
    Builder.CreateCall(memcpyTy, {rp_i8, src_rp, llvm::ConstantInt::get(I64, rowBytes), volatileFlag}, "");
    Builder.CreateCall(memcpyTy, {ci_i8, src_ci, llvm::ConstantInt::get(I64, colBytes), volatileFlag}, "");

    // Build the malloc prototype for allocating the Graph struct
    llvm::FunctionType *mallocFT_graph = llvm::FunctionType::get(
        llvm::PointerType::getUnqual(llvm::Type::getInt8Ty(Context)), // returns i8*
        {Builder.getInt64Ty()},                                       // takes an i64 size
        false);

    llvm::FunctionCallee mallocCalleeG =
        Module.getOrInsertFunction("malloc", mallocFT_graph);
    llvm::Function *mallocFnG =
        llvm::cast<llvm::Function>(mallocCalleeG.getCallee());

    // Compute sizeof(struct.Graph)
    uint64_t graphSize = Module.getDataLayout().getTypeAllocSize(GraphTy);
    llvm::Value *graphSizeC =
        llvm::ConstantInt::get(Builder.getInt64Ty(), graphSize);

    // Call malloc(graphSize)
    llvm::Value *rawGraph = Builder.CreateCall(
        mallocFnG,
        graphSizeC,
        "graph_raw");

    // Cast i8* → %struct.Graph*
    llvm::Value *graphPtr = Builder.CreateBitCast(
        rawGraph,
        GraphTy->getPointerTo(),
        "graph_ptr");

    // GEP + store into field 0: n
    {
        // element 0 is the vertex count 'n'
        llvm::Value *nPtr = Builder.CreateStructGEP(
            GraphTy, graphPtr, 0, "g_n_ptr");
        Builder.CreateStore(
            llvm::ConstantInt::get(Builder.getInt64Ty(), G->n),
            nPtr);
    }

    // GEP + store into field 1: m
    {
        llvm::Value *mPtr = Builder.CreateStructGEP(
            GraphTy, graphPtr, 1, "g_m_ptr");
        Builder.CreateStore(
            llvm::ConstantInt::get(Builder.getInt64Ty(), G->m),
            mPtr);
    }

    // GEP + store into field 2: row_ptr
    {
        llvm::Value *rpPtr = Builder.CreateStructGEP(
            GraphTy, graphPtr, 2, "g_rp_ptr");
        Builder.CreateStore(rowPtr, rpPtr);
    }

    // GEP + store into field 3: col_idx
    {
        llvm::Value *ciPtr = Builder.CreateStructGEP(
            GraphTy, graphPtr, 3, "g_ci_ptr");
        Builder.CreateStore(colPtr, ciPtr);
    }

    GraphMap[G->name] = graphPtr;

    return graphPtr;
}

llvm::Value *zero64(llvm::IRBuilder<> &B, llvm::LLVMContext &C)
{
    return llvm::ConstantInt::get(llvm::Type::getInt64Ty(C), 0);
}

void IRGenVisitor::visitQuery(QueryNode *Q)
{
    // 1) Grab the Graph* value
    llvm::Value *graphPtr = GraphMap[Q->graphName];
    assert(graphPtr && "Graph not found in IRGenVisitor::visitQuery");

    // types
    auto *I64 = llvm::Type::getInt64Ty(Context);
    auto *I32 = llvm::Type::getInt32Ty(Context);
    auto *I1 = llvm::Type::getInt1Ty(Context);
    auto *I8 = llvm::Type::getInt8Ty(Context);
    auto *I8Ptr = llvm::PointerType::getUnqual(I8);

    // 2) Extract fields: n, row_ptr*, col_idx*
    llvm::Value *n_ptr = Builder.CreateStructGEP(GraphTy, graphPtr, 0, "g_n_ptr");
    llvm::Value *rp_ptr = Builder.CreateStructGEP(GraphTy, graphPtr, 2, "g_rp_ptr");
    llvm::Value *ci_ptr = Builder.CreateStructGEP(GraphTy, graphPtr, 3, "g_ci_ptr");

    llvm::Value *n_val = Builder.CreateLoad(I64, n_ptr, "n_val"); // i64
    llvm::Value *row_ptr = Builder.CreateLoad(llvm::PointerType::getUnqual(I64), rp_ptr, "row_ptr");
    llvm::Value *col_idx = Builder.CreateLoad(llvm::PointerType::getUnqual(I32), ci_ptr, "col_idx");

    // // --- prepare printf (used for debugging/printing BFS results) ---
    // llvm::Function *printfFn = Module.getFunction("printf");
    // if (!printfFn)
    // {
    //     auto *printfTy = llvm::FunctionType::get(Builder.getInt32Ty(), {llvm::PointerType::getUnqual(I8)}, true);
    //     printfFn = llvm::Function::Create(printfTy, llvm::Function::ExternalLinkage, "printf", &Module);
    // }
    // llvm::GlobalVariable *fmtBfs = Module.getGlobalVariable(".fmt_bfs");
    // if (!fmtBfs)
    // {
    //     auto *fmtArrTy = llvm::ArrayType::get(I8, 4); // "%d\n\0"
    //     fmtBfs = new llvm::GlobalVariable(
    //         Module,
    //         fmtArrTy,
    //         /*isConstant=*/true,
    //         llvm::GlobalValue::PrivateLinkage,
    //         llvm::ConstantDataArray::getString(Context, "%d\n", true),
    //         ".fmt_bfs");
    // }
    // llvm::Value *fmtPtr = Builder.CreateBitCast(fmtBfs, llvm::PointerType::getUnqual(I8), "fmt_bfs_ptr");

    // 3) malloc/calloc helper for visited and queue
    llvm::FunctionCallee mallocFn = Module.getOrInsertFunction(
        "malloc",
        llvm::FunctionType::get(I8Ptr, {I64}, false));
    llvm::FunctionCallee callocFn = Module.getOrInsertFunction(
        "calloc",
        llvm::FunctionType::get(I8Ptr, {I64, I64}, false));

    // visited: calloc(n,1) -> i1* after bitcast
    llvm::Value *rawVisited = Builder.CreateCall(callocFn, {n_val, llvm::ConstantInt::get(I64, 1)}, "rawVisited");
    llvm::Value *visited = Builder.CreateBitCast(rawVisited, llvm::PointerType::getUnqual(I1), "visited");

    // queue: malloc(n * 4) -> i32* after bitcast
    llvm::Value *bytesQueue = Builder.CreateMul(
        Builder.CreateSExt(n_val, I64),
        llvm::ConstantInt::get(I64, static_cast<uint64_t>(sizeof(int32_t))));
    llvm::Value *rawQueue = Builder.CreateCall(mallocFn, {bytesQueue}, "rawQueue");
    llvm::Value *queue = Builder.CreateBitCast(rawQueue, llvm::PointerType::getUnqual(I32), "queue");

    // entry allocas for head/tail and loop index i, scan index
    llvm::Function *F = Builder.GetInsertBlock()->getParent();
    llvm::IRBuilder<> entryB(&F->getEntryBlock(), F->getEntryBlock().begin());

    llvm::AllocaInst *headPtr = entryB.CreateAlloca(I32, nullptr, "head");
    llvm::AllocaInst *tailPtr = entryB.CreateAlloca(I32, nullptr, "tail");
    llvm::AllocaInst *iPtr = entryB.CreateAlloca(I64, nullptr, "i");       // inner-for index (i64)
    llvm::AllocaInst *scanPtr = entryB.CreateAlloca(I32, nullptr, "scan"); // scan start index (i32)

    // init scan=0
    Builder.CreateStore(Builder.getInt32(0), scanPtr);

    // Create BFS and scan basic blocks (all inserted into function F)
    auto *scanInitBB = llvm::BasicBlock::Create(Context, "scan.init", F);
    auto *scanCondBB = llvm::BasicBlock::Create(Context, "scan.cond", F);
    auto *scanBodyBB = llvm::BasicBlock::Create(Context, "scan.body", F);
    auto *scanStartBfs = llvm::BasicBlock::Create(Context, "scan.startbfs", F); // enqueue start & branch to bfs.cond
    auto *scanIncBB = llvm::BasicBlock::Create(Context, "scan.inc", F);
    auto *scanExitBB = llvm::BasicBlock::Create(Context, "scan.exit", F);

    auto *bfsCondBB = llvm::BasicBlock::Create(Context, "bfs.cond", F);
    auto *bfsBodyBB = llvm::BasicBlock::Create(Context, "bfs.body", F);
    auto *bfsExitBB = llvm::BasicBlock::Create(Context, "bfs.exit", F);

    auto *forInitBB = llvm::BasicBlock::Create(Context, "bfs.for.init", F);
    auto *forCondBB = llvm::BasicBlock::Create(Context, "bfs.for.cond", F);
    auto *forBodyBB = llvm::BasicBlock::Create(Context, "bfs.for.body", F);
    auto *forIncBB = llvm::BasicBlock::Create(Context, "bfs.for.inc", F);
    auto *forExitBB = llvm::BasicBlock::Create(Context, "bfs.for.exit", F);
    auto *enqueueBB = llvm::BasicBlock::Create(Context, "bfs.enqueue", F);

    // Start: jump into scanInit
    Builder.CreateBr(scanInitBB);

    // scanInit: (we already init scanPtr above) -> cond
    Builder.SetInsertPoint(scanInitBB);
    Builder.CreateBr(scanCondBB);

    // scanCond: if (scan < n) -> scanBody else -> scanExit
    Builder.SetInsertPoint(scanCondBB);
    llvm::Value *scanVal = Builder.CreateLoad(I32, scanPtr, "scanVal"); // i32
    llvm::Value *scan64 = Builder.CreateSExt(scanVal, I64, "scan64");   // i64
    llvm::Value *scanCond = Builder.CreateICmpSLT(scan64, n_val, "scanCond");
    Builder.CreateCondBr(scanCond, scanBodyBB, scanExitBB);

    // scanBody: if visited[scan] -> scanInc else -> startBfs
    Builder.SetInsertPoint(scanBodyBB);
    llvm::Value *visitedPtrScan = Builder.CreateGEP(I1, visited, scanVal, "visitedPtrScan");
    llvm::Value *isVisitedScan = Builder.CreateLoad(I1, visitedPtrScan, "isVisitedScan");
    Builder.CreateCondBr(isVisitedScan, scanIncBB, scanStartBfs);

    // scanStartBfs: this is where we begin a BFS from 'scan'
    Builder.SetInsertPoint(scanStartBfs);

    // reset head/tail and enqueue start node
    Builder.CreateStore(Builder.getInt32(0), headPtr);
    Builder.CreateStore(Builder.getInt32(0), tailPtr);
    // queue[0] = scan
    llvm::Value *q0ptr = Builder.CreateGEP(I32, queue, Builder.getInt32(0), "q0ptr");
    Builder.CreateStore(scanVal, q0ptr);
    // visited[scan] = true
    Builder.CreateStore(Builder.getInt1(true), visitedPtrScan);
    // tail = 1
    Builder.CreateStore(Builder.getInt32(1), tailPtr);

    // jump to BFS cond
    Builder.CreateBr(bfsCondBB);

    // bfsCond: while (head < tail)
    Builder.SetInsertPoint(bfsCondBB);
    llvm::Value *h = Builder.CreateLoad(I32, headPtr, "h");
    llvm::Value *t = Builder.CreateLoad(I32, tailPtr, "t");
    llvm::Value *outerCond = Builder.CreateICmpSLT(h, t, "outerCond");
    Builder.CreateCondBr(outerCond, bfsBodyBB, bfsExitBB);

    // bfsBody: dequeue u = queue[h]; head = head + 1
    Builder.SetInsertPoint(bfsBodyBB);
    llvm::Value *uqptr = Builder.CreateGEP(I32, queue, h, "uqptr");
    llvm::Value *u = Builder.CreateLoad(I32, uqptr, "u");
    Builder.CreateStore(Builder.CreateAdd(h, Builder.getInt32(1)), headPtr);

    // print dequeued vertex u
    // Builder.CreateCall(printfFn, {fmtPtr, u});

    // compute rp[u] and rp[u+1]  (rp is i64*)
    llvm::Value *u64 = Builder.CreateSExt(u, I64);
    llvm::Value *rp_u_ptr = Builder.CreateGEP(I64, row_ptr, u64, "rp_u_ptr");
    llvm::Value *rp_u = Builder.CreateLoad(I64, rp_u_ptr, "rp_u");
    llvm::Value *rp_u1_ptr = Builder.CreateGEP(I64, row_ptr, Builder.CreateAdd(u64, Builder.getInt64(1)), "rp_u1_ptr");
    llvm::Value *rp_u1 = Builder.CreateLoad(I64, rp_u1_ptr, "rp_u1");

    // set up inner for loop: jump into forInit
    Builder.CreateBr(forInitBB);

    // forInit: i = rp_u
    Builder.SetInsertPoint(forInitBB);
    Builder.CreateStore(rp_u, iPtr);
    Builder.CreateBr(forCondBB);

    // forCond: if (i < rp_u1) -> forBody else -> forExit
    Builder.SetInsertPoint(forCondBB);
    llvm::Value *iVal = Builder.CreateLoad(I64, iPtr, "iVal");
    llvm::Value *innerCond = Builder.CreateICmpSLT(iVal, rp_u1, "innerCond");
    Builder.CreateCondBr(innerCond, forBodyBB, forExitBB);

    // forBody: v = col_idx[i]; check visited[v]
    Builder.SetInsertPoint(forBodyBB);
    llvm::Value *colPtr = Builder.CreateGEP(I32, col_idx, iVal, "colPtr"); // col_idx[i]
    llvm::Value *v = Builder.CreateLoad(I32, colPtr, "v");

    llvm::Value *visitedPtr = Builder.CreateGEP(I1, visited, v, "visitedPtr");
    llvm::Value *isVisited = Builder.CreateLoad(I1, visitedPtr, "isVisited");

    Builder.CreateCondBr(isVisited, forIncBB, enqueueBB);

    // enqueueBB: visited[v] = 1; queue[tail] = v; tail = tail + 1; -> forInc
    Builder.SetInsertPoint(enqueueBB);
    Builder.CreateStore(Builder.getInt1(true), visitedPtr);
    llvm::Value *tailVal = Builder.CreateLoad(I32, tailPtr, "tailVal");
    llvm::Value *qptr = Builder.CreateGEP(I32, queue, tailVal, "qptr");
    Builder.CreateStore(v, qptr);
    Builder.CreateStore(Builder.CreateAdd(tailVal, Builder.getInt32(1)), tailPtr);
    Builder.CreateBr(forIncBB);

    // forIncBB: i = i + 1 -> forCondBB
    Builder.SetInsertPoint(forIncBB);
    llvm::Value *newI = Builder.CreateAdd(iVal, Builder.getInt64(1), "iNext");
    Builder.CreateStore(newI, iPtr);
    Builder.CreateBr(forCondBB);

    // forExitBB: finished neighbor loop -> go back to bfsCond
    Builder.SetInsertPoint(forExitBB);
    Builder.CreateBr(bfsCondBB);

    // bfsExitBB: BFS finished for this component -> go back to scanInc
    Builder.SetInsertPoint(bfsExitBB);
    Builder.CreateBr(scanIncBB);

    // scanIncBB: scan = scan + 1 -> scanCond
    Builder.SetInsertPoint(scanIncBB);
    llvm::Value *scanNow = Builder.CreateLoad(I32, scanPtr, "scanNow");
    Builder.CreateStore(Builder.CreateAdd(scanNow, Builder.getInt32(1)), scanPtr);
    Builder.CreateBr(scanCondBB);

    // scanExitBB: done scanning all vertices -> done. Set insert point here for any further code
    Builder.SetInsertPoint(scanExitBB);
    return;
}

void IRGenVisitor::visitPrintStmt(PrintStmtNode *PS)
{
    // 1) Ensure printf is declared
    llvm::Function *printfFn = Module.getFunction("printf");
    if (!printfFn)
    {
        // int printf(char*, ...)
        auto *i8p = llvm::PointerType::getUnqual(llvm::Type::getInt8Ty(Context));
        auto *printfTy = llvm::FunctionType::get(
            /*Ret=*/Builder.getInt32Ty(),
            /*Params=*/{i8p},
            /*isVarArg=*/true);
        printfFn = llvm::Function::Create(
            printfTy,
            llvm::Function::ExternalLinkage,
            "printf",
            &Module);
    }

    // 2) Prepare format string
    llvm::Value *fmtPtr = nullptr;
    llvm::Value *val = nullptr;

    if (auto *lit = dynamic_cast<IntLiteralNode *>(PS->expr.get()))
    {
        // integer literal: we’ll just embed the value
        val = llvm::ConstantInt::get(Builder.getInt32Ty(), lit->value);
        // constant global: "%d\n\0"
        static llvm::GlobalVariable *fmtInt = nullptr;
        if (!fmtInt)
        {
            auto *fmtTy = llvm::ArrayType::get(Builder.getInt8Ty(), 4);
            fmtInt = new llvm::GlobalVariable(
                Module, fmtTy, /*isConstant=*/true,
                llvm::GlobalValue::PrivateLinkage,
                llvm::ConstantDataArray::getString(Context, "%d\n", true),
                ".fmt_int");
        }
        fmtPtr = Builder.CreateBitCast(fmtInt,
                                       llvm::PointerType::getUnqual(llvm::Type::getInt8Ty(Context)));
    }
    else if (auto *var = dynamic_cast<VariableNode *>(PS->expr.get()))
    {
        // assume it's an int variable
        llvm::Value *alloca = NamedValues[var->name];
        val = Builder.CreateLoad(Builder.getInt32Ty(), alloca, var->name);
        // same fmtInt as above
        static llvm::GlobalVariable *fmtInt = nullptr;
        if (!fmtInt)
        {
            auto *fmtTy = llvm::ArrayType::get(Builder.getInt8Ty(), 4);
            fmtInt = new llvm::GlobalVariable(
                Module, fmtTy, true,
                llvm::GlobalValue::PrivateLinkage,
                llvm::ConstantDataArray::getString(Context, "%d\n", true),
                ".fmt_int");
        }
        fmtPtr = Builder.CreateBitCast(fmtInt,
                                       llvm::PointerType::getUnqual(llvm::Type::getInt8Ty(Context)));
    }
    else
    {
        // for string literals, extend similarly:
        // extract the const char* from your AST’s StringLiteralNode...
        // use "%s\n" format.
        throw std::runtime_error("print: only int literals & vars supported so far");
    }

    // 3) Call printf(fmtPtr, val)
    Builder.CreateCall(printfFn, {fmtPtr, val});
}



void IRGenVisitor::visitQuery(QueryNode *Q)
{
    // 1) Grab the Graph* value
    llvm::Value *graphPtr = GraphMap[Q->graphName];
    assert(graphPtr && "Graph not found in IRGenVisitor::visitQuery");

    // types
    auto *I64 = llvm::Type::getInt64Ty(Context);
    auto *I32 = llvm::Type::getInt32Ty(Context);
    auto *I1 = llvm::Type::getInt1Ty(Context);
    auto *I8 = llvm::Type::getInt8Ty(Context);
    auto *I8Ptr = llvm::PointerType::getUnqual(I8);

    // 2) Extract fields: n, row_ptr*, col_idx*
    llvm::Value *n_ptr = Builder.CreateStructGEP(GraphTy, graphPtr, 0, "g_n_ptr");
    llvm::Value *rp_ptr = Builder.CreateStructGEP(GraphTy, graphPtr, 2, "g_rp_ptr");
    llvm::Value *ci_ptr = Builder.CreateStructGEP(GraphTy, graphPtr, 3, "g_ci_ptr");

    llvm::Value *n_val = Builder.CreateLoad(I64, n_ptr, "n_val"); // i64
    llvm::Value *row_ptr = Builder.CreateLoad(llvm::PointerType::getUnqual(I64), rp_ptr, "row_ptr");
    llvm::Value *col_idx = Builder.CreateLoad(llvm::PointerType::getUnqual(I32), ci_ptr, "col_idx");

    // --- prepare printf (used for debugging/printing BFS results) ---
    llvm::Function *printfFn = Module.getFunction("printf");
    if (!printfFn)
    {
        auto *printfTy = llvm::FunctionType::get(Builder.getInt32Ty(), {llvm::PointerType::getUnqual(I8)}, true);
        printfFn = llvm::Function::Create(printfTy, llvm::Function::ExternalLinkage, "printf", &Module);
    }
    // format global for printing integers "%d\n"
    llvm::GlobalVariable *fmtBfs = Module.getGlobalVariable(".fmt_bfs");
    if (!fmtBfs)
    {
        auto *fmtArrTy = llvm::ArrayType::get(I8, 4); // "%d\n\0"
        fmtBfs = new llvm::GlobalVariable(
            Module,
            fmtArrTy,
            /*isConstant=*/true,
            llvm::GlobalValue::PrivateLinkage,
            llvm::ConstantDataArray::getString(Context, "%d\n", true),
            ".fmt_bfs");
    }
    llvm::Value *fmtPtr = Builder.CreateBitCast(fmtBfs, llvm::PointerType::getUnqual(I8), "fmt_bfs_ptr");

    // 3) malloc/calloc helper for visited and queue
    llvm::FunctionCallee mallocFn = Module.getOrInsertFunction(
        "malloc",
        llvm::FunctionType::get(I8Ptr, {I64}, false));
    llvm::FunctionCallee callocFn = Module.getOrInsertFunction(
        "calloc",
        llvm::FunctionType::get(I8Ptr, {I64, I64}, false));

    // visited: calloc(n,1) -> i1* after bitcast
    llvm::Value *rawVisited = Builder.CreateCall(callocFn, {n_val, llvm::ConstantInt::get(I64, 1)}, "rawVisited");
    llvm::Value *visited = Builder.CreateBitCast(rawVisited, llvm::PointerType::getUnqual(I1), "visited");

    // queue: malloc(n * 4) -> i32* after bitcast
    llvm::Value *bytesQueue = Builder.CreateMul(
        Builder.CreateSExt(n_val, I64),
        llvm::ConstantInt::get(I64, static_cast<uint64_t>(sizeof(int32_t))));
    llvm::Value *rawQueue = Builder.CreateCall(mallocFn, {bytesQueue}, "rawQueue");
    llvm::Value *queue = Builder.CreateBitCast(rawQueue, llvm::PointerType::getUnqual(I32), "queue");

    // entry allocas for head/tail and loop index i, scan index
    llvm::Function *F = Builder.GetInsertBlock()->getParent();
    llvm::IRBuilder<> entryB(&F->getEntryBlock(), F->getEntryBlock().begin());

    llvm::AllocaInst *headPtr = entryB.CreateAlloca(I32, nullptr, "head");
    llvm::AllocaInst *tailPtr = entryB.CreateAlloca(I32, nullptr, "tail");
    llvm::AllocaInst *iPtr = entryB.CreateAlloca(I64, nullptr, "i");       // inner-for index (i64)
    llvm::AllocaInst *scanPtr = entryB.CreateAlloca(I32, nullptr, "scan"); // scan start index (i32)

    // init scan=0
    Builder.CreateStore(Builder.getInt32(0), scanPtr);

    // Create BFS and scan basic blocks (all inserted into function F)
    auto *scanInitBB = llvm::BasicBlock::Create(Context, "scan.init", F);
    auto *scanCondBB = llvm::BasicBlock::Create(Context, "scan.cond", F);
    auto *scanBodyBB = llvm::BasicBlock::Create(Context, "scan.body", F);
    auto *scanStartBfs = llvm::BasicBlock::Create(Context, "scan.startbfs", F); // enqueue start & branch to bfs.cond
    auto *scanIncBB = llvm::BasicBlock::Create(Context, "scan.inc", F);
    auto *scanExitBB = llvm::BasicBlock::Create(Context, "scan.exit", F);

    auto *bfsCondBB = llvm::BasicBlock::Create(Context, "bfs.cond", F);
    auto *bfsBodyBB = llvm::BasicBlock::Create(Context, "bfs.body", F);
    auto *bfsExitBB = llvm::BasicBlock::Create(Context, "bfs.exit", F);

    auto *forInitBB = llvm::BasicBlock::Create(Context, "bfs.for.init", F);
    auto *forCondBB = llvm::BasicBlock::Create(Context, "bfs.for.cond", F);
    auto *forBodyBB = llvm::BasicBlock::Create(Context, "bfs.for.body", F);
    auto *forIncBB = llvm::BasicBlock::Create(Context, "bfs.for.inc", F);
    auto *forExitBB = llvm::BasicBlock::Create(Context, "bfs.for.exit", F);
    auto *enqueueBB = llvm::BasicBlock::Create(Context, "bfs.enqueue", F);

    // Start: jump into scanInit
    Builder.CreateBr(scanInitBB);

    // scanInit: (we already init scanPtr above) -> cond
    Builder.SetInsertPoint(scanInitBB);
    Builder.CreateBr(scanCondBB);

    // scanCond: if (scan < n) -> scanBody else -> scanExit
    Builder.SetInsertPoint(scanCondBB);
    llvm::Value *scanVal = Builder.CreateLoad(I32, scanPtr, "scanVal"); // i32
    llvm::Value *scan64 = Builder.CreateSExt(scanVal, I64, "scan64");   // i64
    llvm::Value *scanCond = Builder.CreateICmpSLT(scan64, n_val, "scanCond");
    Builder.CreateCondBr(scanCond, scanBodyBB, scanExitBB);

    // scanBody: if visited[scan] -> scanInc else -> startBfs
    Builder.SetInsertPoint(scanBodyBB);
    llvm::Value *visitedPtrScan = Builder.CreateGEP(I1, visited, scanVal, "visitedPtrScan");
    llvm::Value *isVisitedScan = Builder.CreateLoad(I1, visitedPtrScan, "isVisitedScan");
    Builder.CreateCondBr(isVisitedScan, scanIncBB, scanStartBfs);

    // scanStartBfs: this is where we begin a BFS from 'scan'
    Builder.SetInsertPoint(scanStartBfs);

    // reset head/tail and enqueue start node
    Builder.CreateStore(Builder.getInt32(0), headPtr);
    Builder.CreateStore(Builder.getInt32(0), tailPtr);
    // queue[0] = scan
    llvm::Value *q0ptr = Builder.CreateGEP(I32, queue, Builder.getInt32(0), "q0ptr");
    Builder.CreateStore(scanVal, q0ptr);
    // visited[scan] = true
    Builder.CreateStore(Builder.getInt1(true), visitedPtrScan);
    // tail = 1
    Builder.CreateStore(Builder.getInt32(1), tailPtr);

    // jump to BFS cond
    Builder.CreateBr(bfsCondBB);

    // bfsCond: while (head < tail)
    Builder.SetInsertPoint(bfsCondBB);
    llvm::Value *h = Builder.CreateLoad(I32, headPtr, "h");
    llvm::Value *t = Builder.CreateLoad(I32, tailPtr, "t");
    llvm::Value *outerCond = Builder.CreateICmpSLT(h, t, "outerCond");
    Builder.CreateCondBr(outerCond, bfsBodyBB, bfsExitBB);

    // bfsBody: dequeue u = queue[h]; head = head + 1
    Builder.SetInsertPoint(bfsBodyBB);
    llvm::Value *uqptr = Builder.CreateGEP(I32, queue, h, "uqptr");
    llvm::Value *u = Builder.CreateLoad(I32, uqptr, "u");
    Builder.CreateStore(Builder.CreateAdd(h, Builder.getInt32(1)), headPtr);

    // print dequeued vertex u
    Builder.CreateCall(printfFn, {fmtPtr, u});

    // compute rp[u] and rp[u+1]  (rp is i64*)
    llvm::Value *u64 = Builder.CreateSExt(u, I64);
    llvm::Value *rp_u_ptr = Builder.CreateGEP(I64, row_ptr, u64, "rp_u_ptr");
    llvm::Value *rp_u = Builder.CreateLoad(I64, rp_u_ptr, "rp_u");
    llvm::Value *rp_u1_ptr = Builder.CreateGEP(I64, row_ptr, Builder.CreateAdd(u64, Builder.getInt64(1)), "rp_u1_ptr");
    llvm::Value *rp_u1 = Builder.CreateLoad(I64, rp_u1_ptr, "rp_u1");

    // set up inner for loop: jump into forInit
    Builder.CreateBr(forInitBB);

    // forInit: i = rp_u
    Builder.SetInsertPoint(forInitBB);
    Builder.CreateStore(rp_u, iPtr);
    Builder.CreateBr(forCondBB);

    // forCond: if (i < rp_u1) -> forBody else -> forExit
    Builder.SetInsertPoint(forCondBB);
    llvm::Value *iVal = Builder.CreateLoad(I64, iPtr, "iVal");
    llvm::Value *innerCond = Builder.CreateICmpSLT(iVal, rp_u1, "innerCond");
    Builder.CreateCondBr(innerCond, forBodyBB, forExitBB);

    // forBody: v = col_idx[i]; check visited[v]
    Builder.SetInsertPoint(forBodyBB);
    llvm::Value *colPtr = Builder.CreateGEP(I32, col_idx, iVal, "colPtr"); // col_idx[i]
    llvm::Value *v = Builder.CreateLoad(I32, colPtr, "v");

    llvm::Value *visitedPtr = Builder.CreateGEP(I1, visited, v, "visitedPtr");
    llvm::Value *isVisited = Builder.CreateLoad(I1, visitedPtr, "isVisited");

    Builder.CreateCondBr(isVisited, forIncBB, enqueueBB);

    // enqueueBB: visited[v] = 1; queue[tail] = v; tail = tail + 1; -> forInc
    Builder.SetInsertPoint(enqueueBB);
    Builder.CreateStore(Builder.getInt1(true), visitedPtr);
    llvm::Value *tailVal = Builder.CreateLoad(I32, tailPtr, "tailVal");
    llvm::Value *qptr = Builder.CreateGEP(I32, queue, tailVal, "qptr");
    Builder.CreateStore(v, qptr);
    Builder.CreateStore(Builder.CreateAdd(tailVal, Builder.getInt32(1)), tailPtr);
    Builder.CreateBr(forIncBB);

    // forIncBB: i = i + 1 -> forCondBB
    Builder.SetInsertPoint(forIncBB);
    llvm::Value *newI = Builder.CreateAdd(iVal, Builder.getInt64(1), "iNext");
    Builder.CreateStore(newI, iPtr);
    Builder.CreateBr(forCondBB);

    // forExitBB: finished neighbor loop -> go back to bfsCond
    Builder.SetInsertPoint(forExitBB);
    Builder.CreateBr(bfsCondBB);

    // bfsExitBB: BFS finished for this component -> go back to scanInc
    Builder.SetInsertPoint(bfsExitBB);
    Builder.CreateBr(scanIncBB);

    // scanIncBB: scan = scan + 1 -> scanCond
    Builder.SetInsertPoint(scanIncBB);
    llvm::Value *scanNow = Builder.CreateLoad(I32, scanPtr, "scanNow");
    Builder.CreateStore(Builder.CreateAdd(scanNow, Builder.getInt32(1)), scanPtr);
    Builder.CreateBr(scanCondBB);

    // scanExitBB: done scanning all vertices -> done. Set insert point here for any further code
    Builder.SetInsertPoint(scanExitBB);
    return;
}






void IRGenVisitor::visitQuery(QueryNode *Q)
{
    // 1) Grab the Graph* value
    llvm::Value *graphPtr = GraphMap[Q->graphName];
    assert(graphPtr && "Graph not found in IRGenVisitor::visitQuery");

    // types
    auto *I64 = llvm::Type::getInt64Ty(Context);
    auto *I32 = llvm::Type::getInt32Ty(Context);
    auto *I1 = llvm::Type::getInt1Ty(Context);
    auto *I8 = llvm::Type::getInt8Ty(Context);
    auto *I8Ptr = llvm::PointerType::getUnqual(I8);

    // 2) Extract fields: n, row_ptr*, col_idx*
    llvm::Value *n_ptr = Builder.CreateStructGEP(GraphTy, graphPtr, 0, "g_n_ptr");
    llvm::Value *rp_ptr = Builder.CreateStructGEP(GraphTy, graphPtr, 2, "g_rp_ptr");
    llvm::Value *ci_ptr = Builder.CreateStructGEP(GraphTy, graphPtr, 3, "g_ci_ptr");

    llvm::Value *n_val = Builder.CreateLoad(I64, n_ptr, "n_val");
    llvm::Value *row_ptr = Builder.CreateLoad(llvm::PointerType::getUnqual(I64), rp_ptr, "row_ptr");
    llvm::Value *col_idx = Builder.CreateLoad(llvm::PointerType::getUnqual(I32), ci_ptr, "col_idx");

    // 3) malloc/calloc helper for visited and queue
    // malloc: i8* malloc(i64)
    llvm::FunctionCallee mallocFn = Module.getOrInsertFunction(
        "malloc",
        llvm::FunctionType::get(I8Ptr, {I64}, false));

    // calloc: i8* calloc(i64 nmemb, i64 size)
    llvm::FunctionCallee callocFn = Module.getOrInsertFunction(
        "calloc",
        llvm::FunctionType::get(I8Ptr, {I64, I64}, false));

    // visited: use calloc(n, 1) to get zeroed memory (i1* but as i8* from calloc)
    llvm::Value *rawVisited = Builder.CreateCall(callocFn, {n_val, llvm::ConstantInt::get(I64, 1)}, "rawVisited");
    llvm::Value *visited = Builder.CreateBitCast(rawVisited, llvm::PointerType::getUnqual(I1), "visited");

    // queue: malloc(n * sizeof(i32))
    llvm::Value *bytesQueue = Builder.CreateMul(
        Builder.CreateSExt(n_val, I64),
        llvm::ConstantInt::get(I64, static_cast<uint64_t>(sizeof(int32_t))));
    llvm::Value *rawQueue = Builder.CreateCall(mallocFn, {bytesQueue}, "rawQueue");
    llvm::Value *queue = Builder.CreateBitCast(rawQueue, llvm::PointerType::getUnqual(I32), "queue");

    // entry allocas for head/tail and loop index i
    llvm::Function *F = Builder.GetInsertBlock()->getParent();
    llvm::IRBuilder<> entryB(&F->getEntryBlock(), F->getEntryBlock().begin());
    llvm::AllocaInst *headPtr = entryB.CreateAlloca(I32, nullptr, "head");
    llvm::AllocaInst *tailPtr = entryB.CreateAlloca(I32, nullptr, "tail");
    llvm::AllocaInst *iPtr = entryB.CreateAlloca(I64, nullptr, "i"); // loop index (i64)

    // initialize head=0, tail=0
    Builder.CreateStore(Builder.getInt32(0), headPtr);
    Builder.CreateStore(Builder.getInt32(0), tailPtr);

    // enqueue start node 0:
    Builder.CreateStore(Builder.getInt32(0),
                        Builder.CreateGEP(I32, queue, Builder.getInt32(0), "q0ptr"));

    // visited[0] = true
    Builder.CreateStore(Builder.getInt1(true),
                        Builder.CreateGEP(I1, visited, Builder.getInt32(0), "v0ptr"));

    // tail = 1
    Builder.CreateStore(Builder.getInt32(1), tailPtr);

    // Create BFS top-level blocks
    auto *condBB = llvm::BasicBlock::Create(Context, "bfs.cond", F);
    auto *bodyBB = llvm::BasicBlock::Create(Context, "bfs.body", F);
    auto *exitBB = llvm::BasicBlock::Create(Context, "bfs.exit", F);

    // jump to cond
    Builder.CreateBr(condBB);

    // condBB: while (head < tail)
    Builder.SetInsertPoint(condBB);
    llvm::Value *h = Builder.CreateLoad(I32, headPtr, "h");
    llvm::Value *t = Builder.CreateLoad(I32, tailPtr, "t");
    llvm::Value *cond = Builder.CreateICmpSLT(h, t, "cond");
    Builder.CreateCondBr(cond, bodyBB, exitBB);

    // bodyBB: dequeue u = queue[h]; head = head + 1
    Builder.SetInsertPoint(bodyBB);
    llvm::Value *uqptr = Builder.CreateGEP(I32, queue, h, "uqptr");
    llvm::Value *u = Builder.CreateLoad(I32, uqptr, "u");
    Builder.CreateStore(Builder.CreateAdd(h, Builder.getInt32(1)), headPtr);

    // --- INSERT PRINTF FOR u (dequeued vertex) ---
    // declare/ensure printf exists
    llvm::Function *printfFn = Module.getFunction("printf");
    if (!printfFn)
    {
        auto *printfTy = llvm::FunctionType::get(Builder.getInt32Ty(), {llvm::PointerType::getUnqual(I8)}, true);
        printfFn = llvm::Function::Create(printfTy, llvm::Function::ExternalLinkage, "printf", &Module);
    }

    // create or reuse format global ".fmt_bfs"
    llvm::GlobalVariable *fmtBfs = Module.getGlobalVariable(".fmt_bfs");
    if (!fmtBfs)
    {
        auto *fmtArrTy = llvm::ArrayType::get(I8, 4); // "%d\n\0"
        fmtBfs = new llvm::GlobalVariable(
            Module,
            fmtArrTy,
            /*isConstant=*/true,
            llvm::GlobalValue::PrivateLinkage,
            llvm::ConstantDataArray::getString(Context, "%d\n", true),
            ".fmt_bfs");
    }

    llvm::Value *fmtPtr = Builder.CreateBitCast(fmtBfs, llvm::PointerType::getUnqual(I8), "fmt_bfs_ptr");
    Builder.CreateCall(printfFn, {fmtPtr, u});

    // compute rp[u] and rp[u+1]  (rp is i64*)
    llvm::Value *u64 = Builder.CreateSExt(u, I64);
    llvm::Value *rp_u_ptr = Builder.CreateGEP(I64, row_ptr, u64, "rp_u_ptr");
    llvm::Value *rp_u = Builder.CreateLoad(I64, rp_u_ptr, "rp_u");
    llvm::Value *rp_u1_ptr = Builder.CreateGEP(I64, row_ptr, Builder.CreateAdd(u64, Builder.getInt64(1)), "rp_u1_ptr");
    llvm::Value *rp_u1 = Builder.CreateLoad(I64, rp_u1_ptr, "rp_u1");

    //
    // Inner for-loop: for (i = rp_u; i < rp_u1; ++i) { v = col_idx[i]; if (!visited[v]) { visited[v]=1; queue[tail++]=v; } }
    //
    auto *forInitBB = llvm::BasicBlock::Create(Context, "bfs.for.init", F);
    auto *forCondBB = llvm::BasicBlock::Create(Context, "bfs.for.cond", F);
    auto *forBodyBB = llvm::BasicBlock::Create(Context, "bfs.for.body", F);
    auto *forIncBB = llvm::BasicBlock::Create(Context, "bfs.for.inc", F);
    auto *forExitBB = llvm::BasicBlock::Create(Context, "bfs.for.exit", F);

    // jump into forInit
    Builder.CreateBr(forInitBB);

    // forInit: store i = rp_u ; -> forCond
    Builder.SetInsertPoint(forInitBB);
    Builder.CreateStore(rp_u, iPtr);
    Builder.CreateBr(forCondBB);

    // forCond: if (i < rp_u1) -> forBody else -> forExit
    Builder.SetInsertPoint(forCondBB);
    llvm::Value *iVal = Builder.CreateLoad(I64, iPtr, "iVal");
    llvm::Value *innerCond = Builder.CreateICmpSLT(iVal, rp_u1, "innerCond");
    Builder.CreateCondBr(innerCond, forBodyBB, forExitBB);

    // forBody: v = col_idx[i]; check visited[v]
    Builder.SetInsertPoint(forBodyBB);
    // load neighbor index (col_idx is i32*)
    llvm::Value *colPtr = Builder.CreateGEP(I32, col_idx, iVal, "colPtr");
    llvm::Value *v = Builder.CreateLoad(I32, colPtr, "v");

    // visited[v]? -> if visited then goto forInc else mark and enqueue then forInc
    llvm::Value *visitedPtr = Builder.CreateGEP(I1, visited, v, "visitedPtr");
    llvm::Value *isVisited = Builder.CreateLoad(I1, visitedPtr, "isVisited");

    auto *enqueueBB = llvm::BasicBlock::Create(Context, "bfs.enqueue", F);
    Builder.CreateCondBr(isVisited, forIncBB, enqueueBB);

    // enqueueBB: visited[v] = 1; queue[tail] = v; tail = tail + 1; -> forInc
    Builder.SetInsertPoint(enqueueBB);
    Builder.CreateStore(Builder.getInt1(true), visitedPtr);

    // load tail, store queue[tail] = v
    llvm::Value *tailVal = Builder.CreateLoad(I32, tailPtr, "tailVal");
    llvm::Value *qptr = Builder.CreateGEP(I32, queue, tailVal, "qptr");
    Builder.CreateStore(v, qptr);

    // tail = tail + 1
    Builder.CreateStore(Builder.CreateAdd(tailVal, Builder.getInt32(1)), tailPtr);
    Builder.CreateBr(forIncBB);

    // forIncBB: i = i + 1 -> forCondBB
    Builder.SetInsertPoint(forIncBB);
    llvm::Value *newI = Builder.CreateAdd(iVal, Builder.getInt64(1), "iNext");
    Builder.CreateStore(newI, iPtr);
    Builder.CreateBr(forCondBB);

    // forExitBB: finished neighbors -> go back to outer condBB
    Builder.SetInsertPoint(forExitBB);
    Builder.CreateBr(condBB);

    // exitBB: done - optionally print a final newline or return
    Builder.SetInsertPoint(exitBB);
    // (optional) print newline at end:
    // Builder.CreateCall(printfFn, { fmtPtr, Builder.getInt32(-1) }); // not needed
    return;
}




